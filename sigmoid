import numpy as np

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def predict(X, weights):
    return sigmoid(np.dot(X, weights))

def logistic_regression(X, y, lr=0.01, epochs=1000):
    weights = np.zeros(X.shape[1])
    for epoch in range(epochs):
        predictions = predict(X, weights)
        gradient = np.dot(X.T, (predictions - y)) / len(y)
        weights -= lr * gradient
        if epoch % 100 == 0:
            loss = -np.mean(y * np.log(predictions + 1e-8) + (1 - y) * np.log(1 - predictions + 1e-8))
            print(f"Epoch {epoch}: Loss {loss:.4f}")
    return weights

# 示例数据
X = np.array([[1, 2], [1, 3], [1, 4], [1, 5]])
y = np.array([0, 0, 1, 1])
weights = logistic_regression(X, y)
print("训练得到的权重：", weights)
