#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <utility>

using namespace std;

typedef pair<int, int> pii;

void dijkstra(int src, const vector<vector<pii>>& graph) {
    int n = graph.size();
    vector<int> dist(n, numeric_limits<int>::max());
    dist[src] = 0;
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({0, src});

    while (!pq.empty()) {
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if (d != dist[u]) continue;
        for (const auto& edge : graph[u]) {
            int v = edge.first;
            int w = edge.second;
            if (dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                pq.push({dist[v], v});
            }
        }
    }

    for (int i = 0; i < n; i++) {
        cout << "Distance from " << src << " to " << i << " is ";
        if (dist[i] == numeric_limits<int>::max())
            cout << "INF" << endl;
        else
            cout << dist[i] << endl;
    }
}

int main() {
    int n = 5; // 顶点数量
    vector<vector<pii>> graph(n);

    // 添加边：格式 (目标顶点, 权重)
    graph[0].push_back({1, 10});
    graph[0].push_back({3, 5});
    graph[1].push_back({2, 1});
    graph[1].push_back({3, 2});
    graph[2].push_back({4, 4});
    graph[3].push_back({1, 3});
    graph[3].push_back({2, 9});
    graph[3].push_back({4, 2});
    graph[4].push_back({0, 7});
    graph[4].push_back({2, 6});

    dijkstra(0, graph);

    return 0;
}
